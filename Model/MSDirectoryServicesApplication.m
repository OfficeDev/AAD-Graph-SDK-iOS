/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSDirectoryServicesModels.h"
#import "core/MSOrcObjectizer.h"


/** Implementation for MSDirectoryServicesApplication
 *
 */
@implementation MSDirectoryServicesApplication


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
        if(_$$$_$$$propertiesNamesMappings==nil) {
    
        _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"appId", @"appId", @"appRoles", @"appRoles", @"availableToOtherTenants", @"availableToOtherTenants", @"displayName", @"displayName", @"errorUrl", @"errorUrl", @"groupMembershipClaims", @"groupMembershipClaims", @"homepage", @"homepage", @"identifierUris", @"identifierUris", @"keyCredentials", @"keyCredentials", @"knownClientApplications", @"knownClientApplications", @"mainLogo", @"mainLogo", @"logoutUrl", @"logoutUrl", @"oauth2AllowImplicitFlow", @"oauth2AllowImplicitFlow", @"oauth2AllowUrlPathMatching", @"oauth2AllowUrlPathMatching", @"oauth2Permissions", @"oauth2Permissions", @"oauth2RequirePostResponse", @"oauth2RequirePostResponse", @"passwordCredentials", @"passwordCredentials", @"publicClient", @"publicClient", @"replyUrls", @"replyUrls", @"requiredResourceAccess", @"requiredResourceAccess", @"samlMetadataUrl", @"samlMetadataUrl", @"extensionProperties", @"extensionProperties", @"objectType", @"objectType", @"objectId", @"objectId", @"deletionTimestamp", @"deletionTimestamp", @"createdOnBehalfOf", @"createdOnBehalfOf", @"createdObjects", @"createdObjects", @"manager", @"manager", @"directReports", @"directReports", @"members", @"members", @"memberOf", @"memberOf", @"owners", @"owners", @"ownedObjects", @"ownedObjects", nil];
        
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#Microsoft.DirectoryServices.Application";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
        if(dic!=nil) {
		_appId = (![dic objectForKey: @"appId"] || [ [dic objectForKey: @"appId"] isKindOfClass:[NSNull class]] )?_appId:[[dic objectForKey: @"appId"] copy];

        if([dic objectForKey: @"appRoles"] != [NSNull null]){
            _appRoles = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"appRoles"]) {
                [_appRoles addObject:[[MSDirectoryServicesAppRole alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_appRoles resetChangedFlag];
        }
        
		_availableToOtherTenants = (![dic objectForKey: @"availableToOtherTenants"] || [ [dic objectForKey: @"availableToOtherTenants"] isKindOfClass:[NSNull class]] )?_availableToOtherTenants:[[dic objectForKey: @"availableToOtherTenants"] boolValue];
		_displayName = (![dic objectForKey: @"displayName"] || [ [dic objectForKey: @"displayName"] isKindOfClass:[NSNull class]] )?_displayName:[[dic objectForKey: @"displayName"] copy];
		_errorUrl = (![dic objectForKey: @"errorUrl"] || [ [dic objectForKey: @"errorUrl"] isKindOfClass:[NSNull class]] )?_errorUrl:[[dic objectForKey: @"errorUrl"] copy];
		_groupMembershipClaims = (![dic objectForKey: @"groupMembershipClaims"] || [ [dic objectForKey: @"groupMembershipClaims"] isKindOfClass:[NSNull class]] )?_groupMembershipClaims:[[dic objectForKey: @"groupMembershipClaims"] copy];
		_homepage = (![dic objectForKey: @"homepage"] || [ [dic objectForKey: @"homepage"] isKindOfClass:[NSNull class]] )?_homepage:[[dic objectForKey: @"homepage"] copy];

        if([dic objectForKey: @"identifierUris"] != [NSNull null]){
            _identifierUris = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"identifierUris"]) {
                [_identifierUris addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_identifierUris resetChangedFlag];
        }
        

        if([dic objectForKey: @"keyCredentials"] != [NSNull null]){
            _keyCredentials = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"keyCredentials"]) {
                [_keyCredentials addObject:[[MSDirectoryServicesKeyCredential alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_keyCredentials resetChangedFlag];
        }
        

        if([dic objectForKey: @"knownClientApplications"] != [NSNull null]){
            _knownClientApplications = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"knownClientApplications"]) {
                [_knownClientApplications addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_knownClientApplications resetChangedFlag];
        }
        
		_mainLogo = (![dic objectForKey: @"mainLogo"] || [ [dic objectForKey: @"mainLogo"] isKindOfClass:[NSNull class]] )?_mainLogo:nil/*NSStream*/;
		_logoutUrl = (![dic objectForKey: @"logoutUrl"] || [ [dic objectForKey: @"logoutUrl"] isKindOfClass:[NSNull class]] )?_logoutUrl:[[dic objectForKey: @"logoutUrl"] copy];
		_oauth2AllowImplicitFlow = (![dic objectForKey: @"oauth2AllowImplicitFlow"] || [ [dic objectForKey: @"oauth2AllowImplicitFlow"] isKindOfClass:[NSNull class]] )?_oauth2AllowImplicitFlow:[[dic objectForKey: @"oauth2AllowImplicitFlow"] boolValue];
		_oauth2AllowUrlPathMatching = (![dic objectForKey: @"oauth2AllowUrlPathMatching"] || [ [dic objectForKey: @"oauth2AllowUrlPathMatching"] isKindOfClass:[NSNull class]] )?_oauth2AllowUrlPathMatching:[[dic objectForKey: @"oauth2AllowUrlPathMatching"] boolValue];

        if([dic objectForKey: @"oauth2Permissions"] != [NSNull null]){
            _oauth2Permissions = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"oauth2Permissions"]) {
                [_oauth2Permissions addObject:[[MSDirectoryServicesOAuth2Permission alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_oauth2Permissions resetChangedFlag];
        }
        
		_oauth2RequirePostResponse = (![dic objectForKey: @"oauth2RequirePostResponse"] || [ [dic objectForKey: @"oauth2RequirePostResponse"] isKindOfClass:[NSNull class]] )?_oauth2RequirePostResponse:[[dic objectForKey: @"oauth2RequirePostResponse"] boolValue];

        if([dic objectForKey: @"passwordCredentials"] != [NSNull null]){
            _passwordCredentials = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"passwordCredentials"]) {
                [_passwordCredentials addObject:[[MSDirectoryServicesPasswordCredential alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_passwordCredentials resetChangedFlag];
        }
        
		_publicClient = (![dic objectForKey: @"publicClient"] || [ [dic objectForKey: @"publicClient"] isKindOfClass:[NSNull class]] )?_publicClient:[[dic objectForKey: @"publicClient"] boolValue];

        if([dic objectForKey: @"replyUrls"] != [NSNull null]){
            _replyUrls = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"replyUrls"]) {
                [_replyUrls addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_replyUrls resetChangedFlag];
        }
        

        if([dic objectForKey: @"requiredResourceAccess"] != [NSNull null]){
            _requiredResourceAccess = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"requiredResourceAccess"]) {
                [_requiredResourceAccess addObject:[[MSDirectoryServicesRequiredResourceAccess alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_requiredResourceAccess resetChangedFlag];
        }
        
		_samlMetadataUrl = (![dic objectForKey: @"samlMetadataUrl"] || [ [dic objectForKey: @"samlMetadataUrl"] isKindOfClass:[NSNull class]] )?_samlMetadataUrl:[[dic objectForKey: @"samlMetadataUrl"] copy];

        if([dic objectForKey: @"extensionProperties"] != [NSNull null]){
            _extensionProperties = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"extensionProperties"]) {
                [_extensionProperties addObject:[[MSDirectoryServicesExtensionProperty alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_extensionProperties resetChangedFlag];
        }
        
		self.objectType = (![dic objectForKey: @"objectType"] || [ [dic objectForKey: @"objectType"] isKindOfClass:[NSNull class]] )?self.objectType:[[dic objectForKey: @"objectType"] copy];
		self.objectId = (![dic objectForKey: @"objectId"] || [ [dic objectForKey: @"objectId"] isKindOfClass:[NSNull class]] )?self.objectId:[[dic objectForKey: @"objectId"] copy];
		self.deletionTimestamp = (![dic objectForKey: @"deletionTimestamp"] || [ [dic objectForKey: @"deletionTimestamp"] isKindOfClass:[NSNull class]] )?self.deletionTimestamp:[MSOrcObjectizer dateFromString:[dic objectForKey: @"deletionTimestamp"]];
		self.createdOnBehalfOf = (![dic objectForKey: @"createdOnBehalfOf"] || [ [dic objectForKey: @"createdOnBehalfOf"] isKindOfClass:[NSNull class]] )?self.createdOnBehalfOf:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"createdOnBehalfOf"]];

        if([dic objectForKey: @"createdObjects"] != [NSNull null]){
            self.createdObjects = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"createdObjects"]) {
                [self.createdObjects addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)self.createdObjects resetChangedFlag];
        }
        
		self.manager = (![dic objectForKey: @"manager"] || [ [dic objectForKey: @"manager"] isKindOfClass:[NSNull class]] )?self.manager:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"manager"]];

        if([dic objectForKey: @"directReports"] != [NSNull null]){
            self.directReports = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"directReports"]) {
                [self.directReports addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)self.directReports resetChangedFlag];
        }
        

        if([dic objectForKey: @"members"] != [NSNull null]){
            self.members = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"members"]) {
                [self.members addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)self.members resetChangedFlag];
        }
        

        if([dic objectForKey: @"memberOf"] != [NSNull null]){
            self.memberOf = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"memberOf"]) {
                [self.memberOf addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)self.memberOf resetChangedFlag];
        }
        

        if([dic objectForKey: @"owners"] != [NSNull null]){
            self.owners = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"owners"]) {
                [self.owners addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)self.owners resetChangedFlag];
        }
        

        if([dic objectForKey: @"ownedObjects"] != [NSNull null]){
            self.ownedObjects = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"ownedObjects"]) {
                [self.ownedObjects addObject:[[MSDirectoryServicesDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)self.ownedObjects resetChangedFlag];
        }
        
    }
    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = [self.appId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"appId"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.appRoles) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"appRoles"];}
	{[dic setValue: (self.availableToOtherTenants?@"true":@"false") forKey: @"availableToOtherTenants"];}
	{id curVal = [self.displayName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"displayName"];}
	{id curVal = [self.errorUrl copy];if (curVal!=nil) [dic setValue: curVal forKey: @"errorUrl"];}
	{id curVal = [self.groupMembershipClaims copy];if (curVal!=nil) [dic setValue: curVal forKey: @"groupMembershipClaims"];}
	{id curVal = [self.homepage copy];if (curVal!=nil) [dic setValue: curVal forKey: @"homepage"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.identifierUris) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"identifierUris"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.keyCredentials) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"keyCredentials"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.knownClientApplications) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"knownClientApplications"];}
	{id curVal = nil/*NSStream*/;if (curVal!=nil) [dic setValue: curVal forKey: @"mainLogo"];}
	{id curVal = [self.logoutUrl copy];if (curVal!=nil) [dic setValue: curVal forKey: @"logoutUrl"];}
	{[dic setValue: (self.oauth2AllowImplicitFlow?@"true":@"false") forKey: @"oauth2AllowImplicitFlow"];}
	{[dic setValue: (self.oauth2AllowUrlPathMatching?@"true":@"false") forKey: @"oauth2AllowUrlPathMatching"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.oauth2Permissions) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"oauth2Permissions"];}
	{[dic setValue: (self.oauth2RequirePostResponse?@"true":@"false") forKey: @"oauth2RequirePostResponse"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.passwordCredentials) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"passwordCredentials"];}
	{[dic setValue: (self.publicClient?@"true":@"false") forKey: @"publicClient"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.replyUrls) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"replyUrls"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.requiredResourceAccess) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"requiredResourceAccess"];}
	{id curVal = [self.samlMetadataUrl copy];if (curVal!=nil) [dic setValue: curVal forKey: @"samlMetadataUrl"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.extensionProperties) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"extensionProperties"];}
	{id curVal = [self.objectType copy];if (curVal!=nil) [dic setValue: curVal forKey: @"objectType"];}
	{id curVal = [self.objectId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"objectId"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.deletionTimestamp];if (curVal!=nil) [dic setValue: curVal forKey: @"deletionTimestamp"];}
	{id curVal = [self.createdOnBehalfOf toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"createdOnBehalfOf"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.createdObjects) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"createdObjects"];}
	{id curVal = [self.manager toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"manager"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.directReports) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"directReports"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.members) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"members"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.memberOf) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"memberOf"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.owners) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"owners"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.ownedObjects) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"ownedObjects"];}
    [dic setValue: @"#Microsoft.DirectoryServices.Application" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.appId;
    if([self.updatedValues containsObject:@"appId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"appId"];
            }
    }
	{id curVal = self.appRoles;
    if([self.updatedValues containsObject:@"appRoles"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"appRoles"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.appRoles) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"appRoles"];
        }
        
            }}
 if([self.updatedValues containsObject:@"availableToOtherTenants"])
            { [dic setValue: (self.availableToOtherTenants?@"true":@"false") forKey: @"availableToOtherTenants"];
}	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"displayName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"displayName"];
            }
    }
	{id curVal = self.errorUrl;
    if([self.updatedValues containsObject:@"errorUrl"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"errorUrl"];
            }
    }
	{id curVal = self.groupMembershipClaims;
    if([self.updatedValues containsObject:@"groupMembershipClaims"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"groupMembershipClaims"];
            }
    }
	{id curVal = self.homepage;
    if([self.updatedValues containsObject:@"homepage"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"homepage"];
            }
    }
	{id curVal = self.identifierUris;
    if([self.updatedValues containsObject:@"identifierUris"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"identifierUris"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.identifierUris) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"identifierUris"];
        }
        
            }}
	{id curVal = self.keyCredentials;
    if([self.updatedValues containsObject:@"keyCredentials"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"keyCredentials"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.keyCredentials) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"keyCredentials"];
        }
        
            }}
	{id curVal = self.knownClientApplications;
    if([self.updatedValues containsObject:@"knownClientApplications"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"knownClientApplications"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.knownClientApplications) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"knownClientApplications"];
        }
        
            }}
	{id curVal = self.mainLogo;
    if([self.updatedValues containsObject:@"mainLogo"])
    {
                [dic setValue: curVal==nil?[NSNull null]:nil/*NSStream*/ forKey: @"mainLogo"];
            }
    }
	{id curVal = self.logoutUrl;
    if([self.updatedValues containsObject:@"logoutUrl"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"logoutUrl"];
            }
    }
 if([self.updatedValues containsObject:@"oauth2AllowImplicitFlow"])
            { [dic setValue: (self.oauth2AllowImplicitFlow?@"true":@"false") forKey: @"oauth2AllowImplicitFlow"];
} if([self.updatedValues containsObject:@"oauth2AllowUrlPathMatching"])
            { [dic setValue: (self.oauth2AllowUrlPathMatching?@"true":@"false") forKey: @"oauth2AllowUrlPathMatching"];
}	{id curVal = self.oauth2Permissions;
    if([self.updatedValues containsObject:@"oauth2Permissions"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"oauth2Permissions"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.oauth2Permissions) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"oauth2Permissions"];
        }
        
            }}
 if([self.updatedValues containsObject:@"oauth2RequirePostResponse"])
            { [dic setValue: (self.oauth2RequirePostResponse?@"true":@"false") forKey: @"oauth2RequirePostResponse"];
}	{id curVal = self.passwordCredentials;
    if([self.updatedValues containsObject:@"passwordCredentials"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"passwordCredentials"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.passwordCredentials) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"passwordCredentials"];
        }
        
            }}
 if([self.updatedValues containsObject:@"publicClient"])
            { [dic setValue: (self.publicClient?@"true":@"false") forKey: @"publicClient"];
}	{id curVal = self.replyUrls;
    if([self.updatedValues containsObject:@"replyUrls"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"replyUrls"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.replyUrls) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"replyUrls"];
        }
        
            }}
	{id curVal = self.requiredResourceAccess;
    if([self.updatedValues containsObject:@"requiredResourceAccess"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"requiredResourceAccess"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.requiredResourceAccess) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"requiredResourceAccess"];
        }
        
            }}
	{id curVal = self.samlMetadataUrl;
    if([self.updatedValues containsObject:@"samlMetadataUrl"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"samlMetadataUrl"];
            }
    }
	{id curVal = self.extensionProperties;
    if([self.updatedValues containsObject:@"extensionProperties"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"extensionProperties"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.extensionProperties) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"extensionProperties"];
        }
        
            }}
	{id curVal = self.objectType;
    if([self.updatedValues containsObject:@"objectType"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectType"];
            }
    }
	{id curVal = self.objectId;
    if([self.updatedValues containsObject:@"objectId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"objectId"];
            }
    }
	{id curVal = self.deletionTimestamp;
    if([self.updatedValues containsObject:@"deletionTimestamp"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"deletionTimestamp"];
            }
    }
	{id curVal = self.createdOnBehalfOf;
    if([self.updatedValues containsObject:@"createdOnBehalfOf"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"createdOnBehalfOf"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"createdOnBehalfOf"];
            }
        
            }}
	{id curVal = self.createdObjects;
    if([self.updatedValues containsObject:@"createdObjects"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"createdObjects"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.createdObjects) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"createdObjects"];
        }
        
            }}
	{id curVal = self.manager;
    if([self.updatedValues containsObject:@"manager"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"manager"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"manager"];
            }
        
            }}
	{id curVal = self.directReports;
    if([self.updatedValues containsObject:@"directReports"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"directReports"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.directReports) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"directReports"];
        }
        
            }}
	{id curVal = self.members;
    if([self.updatedValues containsObject:@"members"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"members"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.members) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"members"];
        }
        
            }}
	{id curVal = self.memberOf;
    if([self.updatedValues containsObject:@"memberOf"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"memberOf"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.memberOf) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"memberOf"];
        }
        
            }}
	{id curVal = self.owners;
    if([self.updatedValues containsObject:@"owners"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"owners"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.owners) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"owners"];
        }
        
            }}
	{id curVal = self.ownedObjects;
    if([self.updatedValues containsObject:@"ownedObjects"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"ownedObjects"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.ownedObjects) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"ownedObjects"];
        }
        
            }}
    return dic;
}


/** Setter implementation for property appId
 *
 */
- (void) setAppId: (NSString *) value {
    _appId = value;
    [self valueChangedFor:@"appId"];
}
       
/** Setter implementation for property appRoles
 *
 */
- (void) setAppRoles: (NSMutableArray *) value {
    _appRoles = value;
    [self valueChangedFor:@"appRoles"];
}
       
/** Setter implementation for property availableToOtherTenants
 *
 */
- (void) setAvailableToOtherTenants: (bool) value {
    _availableToOtherTenants = value;
    [self valueChangedFor:@"availableToOtherTenants"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property errorUrl
 *
 */
- (void) setErrorUrl: (NSString *) value {
    _errorUrl = value;
    [self valueChangedFor:@"errorUrl"];
}
       
/** Setter implementation for property groupMembershipClaims
 *
 */
- (void) setGroupMembershipClaims: (NSString *) value {
    _groupMembershipClaims = value;
    [self valueChangedFor:@"groupMembershipClaims"];
}
       
/** Setter implementation for property homepage
 *
 */
- (void) setHomepage: (NSString *) value {
    _homepage = value;
    [self valueChangedFor:@"homepage"];
}
       
/** Setter implementation for property identifierUris
 *
 */
- (void) setIdentifierUris: (NSMutableArray *) value {
    _identifierUris = value;
    [self valueChangedFor:@"identifierUris"];
}
       
/** Setter implementation for property keyCredentials
 *
 */
- (void) setKeyCredentials: (NSMutableArray *) value {
    _keyCredentials = value;
    [self valueChangedFor:@"keyCredentials"];
}
       
/** Setter implementation for property knownClientApplications
 *
 */
- (void) setKnownClientApplications: (NSMutableArray *) value {
    _knownClientApplications = value;
    [self valueChangedFor:@"knownClientApplications"];
}
       
/** Setter implementation for property mainLogo
 *
 */
- (void) setMainLogo: (NSStream *) value {
    _mainLogo = value;
    [self valueChangedFor:@"mainLogo"];
}
       
/** Setter implementation for property logoutUrl
 *
 */
- (void) setLogoutUrl: (NSString *) value {
    _logoutUrl = value;
    [self valueChangedFor:@"logoutUrl"];
}
       
/** Setter implementation for property oauth2AllowImplicitFlow
 *
 */
- (void) setOauth2AllowImplicitFlow: (bool) value {
    _oauth2AllowImplicitFlow = value;
    [self valueChangedFor:@"oauth2AllowImplicitFlow"];
}
       
/** Setter implementation for property oauth2AllowUrlPathMatching
 *
 */
- (void) setOauth2AllowUrlPathMatching: (bool) value {
    _oauth2AllowUrlPathMatching = value;
    [self valueChangedFor:@"oauth2AllowUrlPathMatching"];
}
       
/** Setter implementation for property oauth2Permissions
 *
 */
- (void) setOauth2Permissions: (NSMutableArray *) value {
    _oauth2Permissions = value;
    [self valueChangedFor:@"oauth2Permissions"];
}
       
/** Setter implementation for property oauth2RequirePostResponse
 *
 */
- (void) setOauth2RequirePostResponse: (bool) value {
    _oauth2RequirePostResponse = value;
    [self valueChangedFor:@"oauth2RequirePostResponse"];
}
       
/** Setter implementation for property passwordCredentials
 *
 */
- (void) setPasswordCredentials: (NSMutableArray *) value {
    _passwordCredentials = value;
    [self valueChangedFor:@"passwordCredentials"];
}
       
/** Setter implementation for property publicClient
 *
 */
- (void) setPublicClient: (bool) value {
    _publicClient = value;
    [self valueChangedFor:@"publicClient"];
}
       
/** Setter implementation for property replyUrls
 *
 */
- (void) setReplyUrls: (NSMutableArray *) value {
    _replyUrls = value;
    [self valueChangedFor:@"replyUrls"];
}
       
/** Setter implementation for property requiredResourceAccess
 *
 */
- (void) setRequiredResourceAccess: (NSMutableArray *) value {
    _requiredResourceAccess = value;
    [self valueChangedFor:@"requiredResourceAccess"];
}
       
/** Setter implementation for property samlMetadataUrl
 *
 */
- (void) setSamlMetadataUrl: (NSString *) value {
    _samlMetadataUrl = value;
    [self valueChangedFor:@"samlMetadataUrl"];
}
       
/** Setter implementation for property extensionProperties
 *
 */
- (void) setExtensionProperties: (NSMutableArray *) value {
    _extensionProperties = value;
    [self valueChangedFor:@"extensionProperties"];
}
       

@end
