/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Open Technologies, Inc. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/


#import "MSDirectoryServicesFetchers.h"
#import "core/core.h"

@implementation MSDirectoryServicesDirectoryObjectFetcher

@synthesize operations = _operations;

- (instancetype)initWithUrl:(NSString *)urlComponent parent:(id<MSOrcExecutable>)parent {

    if (self = [super initWithUrl:urlComponent parent:parent asClass:[MSDirectoryServicesDirectoryObject class]]) {

		_operations = [[MSDirectoryServicesDirectoryObjectOperations alloc] initOperationWithUrl:urlComponent parent:parent];
    }

    return self;
}

- (void)update:(id)entity callback:(void (^)(MSDirectoryServicesDirectoryObject *DirectoryObject, MSOrcError *e))callback {

	return [super update:entity callback:callback];
}

- (void)delete:(void (^)(int status, MSOrcError *e))callback {

	return [super deleteWithCallback:callback];
}

- (MSDirectoryServicesDirectoryObjectFetcher *)addCustomParametersWithName:(NSString *)name value:(id)value {
    [super addCustomParametersWithName:name value:value];
    
    return self;
}

- (MSDirectoryServicesDirectoryObjectFetcher *)addCustomHeaderWithName:(NSString *)name value:(NSString *)value {
    [super addCustomHeaderWithName:name value:value];
    
    return self;
}

- (MSDirectoryServicesDirectoryObjectFetcher *)select:(NSString *)params {
    [super select:params];
    
    return self;
}

- (MSDirectoryServicesDirectoryObjectFetcher *)expand:(NSString *)value {
    [super expand:value];
    
    return self;
}

- (void) readWithCallback:(void (^)(MSDirectoryServicesDirectoryObject *DirectoryObject, MSOrcError *error))callback {
    [super readWithCallback:^(id response, MSOrcError *error) {
        callback(response, error);
    }];
}

- (MSDirectoryServicesDirectoryObjectFetcher *)createdOnBehalfOf {

	 return [[MSDirectoryServicesDirectoryObjectFetcher alloc] initWithUrl:@"createdOnBehalfOf" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (MSDirectoryServicesDirectoryObjectCollectionFetcher *)createdObjects {

    return [[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"createdObjects" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (MSDirectoryServicesDirectoryObjectFetcher *)createdObjectsById:(NSString *)identifier {

    return [[[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"createdObjects" parent:self asClass:[MSDirectoryServicesDirectoryObject class]] getById:identifier];

}

- (MSDirectoryServicesDirectoryObjectFetcher *)manager {

	 return [[MSDirectoryServicesDirectoryObjectFetcher alloc] initWithUrl:@"manager" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (MSDirectoryServicesDirectoryObjectCollectionFetcher *)directReports {

    return [[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"directReports" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (MSDirectoryServicesDirectoryObjectFetcher *)directReportsById:(NSString *)identifier {

    return [[[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"directReports" parent:self asClass:[MSDirectoryServicesDirectoryObject class]] getById:identifier];

}

- (MSDirectoryServicesDirectoryObjectCollectionFetcher *)members {

    return [[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"members" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (MSDirectoryServicesDirectoryObjectFetcher *)membersById:(NSString *)identifier {

    return [[[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"members" parent:self asClass:[MSDirectoryServicesDirectoryObject class]] getById:identifier];

}

- (MSDirectoryServicesDirectoryObjectCollectionFetcher *)memberOf {

    return [[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"memberOf" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (MSDirectoryServicesDirectoryObjectFetcher *)memberOfById:(NSString *)identifier {

    return [[[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"memberOf" parent:self asClass:[MSDirectoryServicesDirectoryObject class]] getById:identifier];

}

- (MSDirectoryServicesDirectoryObjectCollectionFetcher *)owners {

    return [[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"owners" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (MSDirectoryServicesDirectoryObjectFetcher *)ownersById:(NSString *)identifier {

    return [[[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"owners" parent:self asClass:[MSDirectoryServicesDirectoryObject class]] getById:identifier];

}

- (MSDirectoryServicesDirectoryObjectCollectionFetcher *)ownedObjects {

    return [[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"ownedObjects" parent:self asClass:[MSDirectoryServicesDirectoryObject class]];
}

- (MSDirectoryServicesDirectoryObjectFetcher *)ownedObjectsById:(NSString *)identifier {

    return [[[MSDirectoryServicesDirectoryObjectCollectionFetcher alloc] initWithUrl:@"ownedObjects" parent:self asClass:[MSDirectoryServicesDirectoryObject class]] getById:identifier];

}

- (MSDirectoryServicesApplicationFetcher *)asApplication {

	return [[MSDirectoryServicesApplicationFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicesApplication class]];
}

- (MSDirectoryServicesUserFetcher *)asUser {

	return [[MSDirectoryServicesUserFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicesUser class]];
}

- (MSDirectoryServicesExtensionPropertyFetcher *)asExtensionProperty {

	return [[MSDirectoryServicesExtensionPropertyFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicesExtensionProperty class]];
}

- (MSDirectoryServicesContactFetcher *)asContact {

	return [[MSDirectoryServicesContactFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicesContact class]];
}

- (MSDirectoryServicesDeviceFetcher *)asDevice {

	return [[MSDirectoryServicesDeviceFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicesDevice class]];
}

- (MSDirectoryServicesDeviceConfigurationFetcher *)asDeviceConfiguration {

	return [[MSDirectoryServicesDeviceConfigurationFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicesDeviceConfiguration class]];
}

- (MSDirectoryServicesDirectoryLinkChangeFetcher *)asDirectoryLinkChange {

	return [[MSDirectoryServicesDirectoryLinkChangeFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicesDirectoryLinkChange class]];
}

- (MSDirectoryServicesAppRoleAssignmentFetcher *)asAppRoleAssignment {

	return [[MSDirectoryServicesAppRoleAssignmentFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicesAppRoleAssignment class]];
}

- (MSDirectoryServicesGroupFetcher *)asGroup {

	return [[MSDirectoryServicesGroupFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicesGroup class]];
}

- (MSDirectoryServicesDirectoryRoleFetcher *)asDirectoryRole {

	return [[MSDirectoryServicesDirectoryRoleFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicesDirectoryRole class]];
}

- (MSDirectoryServicesDirectoryRoleTemplateFetcher *)asDirectoryRoleTemplate {

	return [[MSDirectoryServicesDirectoryRoleTemplateFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicesDirectoryRoleTemplate class]];
}

- (MSDirectoryServicesServicePrincipalFetcher *)asServicePrincipal {

	return [[MSDirectoryServicesServicePrincipalFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicesServicePrincipal class]];
}

- (MSDirectoryServicesTenantDetailFetcher *)asTenantDetail {

	return [[MSDirectoryServicesTenantDetailFetcher alloc] initWithUrl:@"" parent:self asClass:[MSDirectoryServicesTenantDetail class]];
}

@end
